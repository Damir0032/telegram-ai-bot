import re
import openai
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    ContextTypes, MessageHandler, filters
)
from googleapiclient.discovery import build
import os
from dotenv import load_dotenv

load_dotenv()

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
YOUTUBE_API_KEY = os.getenv("YOUTUBE_API_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

openai_client = openai.OpenAI(api_key=OPENAI_API_KEY)

# –°–∞–±–∞“õ –∫–µ—Å—Ç–µ—Å—ñ (–º—ã—Å–∞–ª)
SCHEDULE_INFO = (
    "üìÖ –°–∞–±–∞“õ –∫–µ—Å—Ç–µ—Å—ñ:\n"
    "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:\n"
    "  09:00 - 10:30: –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞\n"
    "  10:45 - 12:15: –§–∏–∑–∏–∫–∞\n"
    "  13:00 - 14:30: “ö–∞–∑–∞“õ —Ç—ñ–ª—ñ\n\n"
    "–í—Ç–æ—Ä–Ω–∏–∫:\n"
    "  09:00 - 10:30: –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞\n"
    "  10:45 - 12:15: –ë–∏–æ–ª–æ–≥–∏—è\n"
    "  13:00 - 14:30: –•–∏–º–∏—è\n\n"
    "–°–æ“£“ì—ã –∂–∞“£–∞—Ä—Ç—É–ª–∞—Ä “Ø—à—ñ–Ω —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑."
)

# –ë–∞–π–ª–∞–Ω—ã—Å –¥–µ—Ä–µ–∫—Ç–µ—Ä—ñ
CONTACT_INFO = (
    "üìû –ë–∞–π–ª–∞–Ω—ã—Å:\n"
    "–°–∞–π—Ç: https://urbancollege.edu.kz\n"
    "–¢–µ–ª–µ—Ñ–æ–Ω: +7 708 425 5412\n"
    "–ú–µ–∫–µ–Ω–∂–∞–π: –ê—Å—Ç–∞–Ω–∞ “õ–∞–ª–∞—Å—ã, –î”ô—É–ª–µ—Ç–∫–µ—Ä–µ–π –∫”©—à–µ—Å—ñ, 1"
)

# –ñ–∞“£–∞–ª—ã“õ—Ç–∞—Ä (–º—ã—Å–∞–ª)
NEWS_INFO = (
    "üì∞ –°–æ“£“ì—ã –∂–∞“£–∞–ª—ã“õ—Ç–∞—Ä:\n"
    "1. 25 –º–∞–º—ã—Ä–¥–∞ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—Ç–µ –∞—à—ã“õ –µ—Å—ñ–∫ –∫“Ø–Ω—ñ ”©—Ç–µ–¥—ñ.\n"
    "2. IT —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ñ–Ω–¥–µ –∂–∞“£–∞ –∫—É—Ä—Å –±–∞—Å—Ç–∞–ª–¥—ã.\n"
    "3. –°—Ç—É–¥–µ–Ω—Ç—Ç–µ—Ä–≥–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω —Å–ø–æ—Ä—Ç—Ç—ã“õ –∂–∞—Ä—ã—Å—Ç–∞—Ä –∂–∞“õ—ã–Ω–¥–∞ –±–∞—Å—Ç–∞–ª–∞–¥—ã."
)

# –ú–∞–º–∞–Ω–¥—ã“õ—Ç–∞—Ä (–º—ã—Å–∞–ª)
MAJORS_INFO = (
    "üéì –ú–∞–º–∞–Ω–¥—ã“õ—Ç–∞—Ä —Ç—ñ–∑—ñ–º—ñ:\n"
    "- 06130100 –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ (–ø–æ –≤–∏–¥–∞–º)\n"
    "- 06120100 –í—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ (–ø–æ –≤–∏–¥–∞–º)\n"
    "- 06120200 –°–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n"
    "- 07321100 –ú–æ–Ω—Ç–∞–∂ –∏ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –æ–±—ä–µ–∫—Ç–æ–≤ –∂–∏–ª–∏—â–Ω–æ-–∫–æ–º–º—É–Ω–∞–ª—å–Ω–æ–≥–æ —Ö–æ–∑—è–π—Å—Ç–≤–∞\n"
    "- 07130200 –≠–ª–µ–∫—Ç—Ä–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ (–ø–æ –æ—Ç—Ä–∞—Å–ª—è–º)\n"
    "- 10130100 –ì–æ—Å—Ç–∏–Ω–∏—á–Ω—ã–π –±–∏–∑–Ω–µ—Å\n"
    "- 07320400 –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é"
)

# üîò –ù–µ–≥—ñ–∑–≥—ñ –º”ô–∑—ñ—Ä
async def show_main_menu(update, context):
    keyboard = [
        [InlineKeyboardButton("üìÖ –°–∞–±–∞“õ –∫–µ—Å—Ç–µ—Å—ñ", callback_data='schedule')],
        [InlineKeyboardButton("üß† –°“±—Ä–∞“õ “õ–æ—é (AI)", callback_data='ask_ai')],
        [InlineKeyboardButton("üì∞ –ñ–∞“£–∞–ª—ã“õ—Ç–∞—Ä", callback_data='news')],
        [InlineKeyboardButton("üéì –ú–∞–º–∞–Ω–¥—ã“õ—Ç–∞—Ä", callback_data='majors')],
        [InlineKeyboardButton("üìû –ë–∞–π–ª–∞–Ω—ã—Å", callback_data='contact')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text("–ù–µ–≥—ñ–∑–≥—ñ –º”ô–∑—ñ—Ä:", reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.edit_message_text("–ù–µ–≥—ñ–∑–≥—ñ –º”ô–∑—ñ—Ä:", reply_markup=reply_markup)

# üîò /start –Ω–µ–º–µ—Å–µ /menu
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_main_menu(update, context)

# –ë–∞—Ç—ã—Ä–º–∞ ”©“£–¥–µ—É—à—ñ
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "schedule":
        await query.edit_message_text(
            SCHEDULE_INFO,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ê—Ä—Ç“õ–∞", callback_data='main_menu')]
            ])
        )
    elif query.data == "ask_ai":
        context.user_data["mode"] = "ask_ai"
        await query.edit_message_text(
            "üß† –°“±—Ä–∞“ì—ã“£—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ê—Ä—Ç“õ–∞", callback_data='main_menu')]
            ])
        )
    elif query.data == "news":
        await query.edit_message_text(
            NEWS_INFO,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ê—Ä—Ç“õ–∞", callback_data='main_menu')]
            ])
        )
    elif query.data == "majors":
        await query.edit_message_text(
            MAJORS_INFO,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ê—Ä—Ç“õ–∞", callback_data='main_menu')]
            ])
        )
    elif query.data == "contact":
        await query.edit_message_text(
            CONTACT_INFO,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ê—Ä—Ç“õ–∞", callback_data='main_menu')]
            ])
        )
    elif query.data == "main_menu":
        context.user_data["mode"] = None
        await show_main_menu(update, context)

# AI —Å“±—Ä–∞“õ ”©“£–¥–µ—É—à—ñ
async def handle_ai_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("mode") == "ask_ai":
        question = update.message.text
        await update.message.reply_text("ü§ñ –ñ–∞—É–∞–ø –¥–∞–π—ã–Ω–¥–∞–ø –∂–∞—Ç—ã—Ä–º—ã–Ω...")

        try:
            response = openai_client.chat.completions.create(
                model="gpt-4",
                messages=[{"role": "user", "content": question}]
            )
            answer = response.choices[0].message.content.strip()

            # üîò –ê—Ä—Ç“õ–∞ –±–∞—Ç—ã—Ä–º–∞—Å—ã
            back_button = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ê—Ä—Ç“õ–∞", callback_data='main_menu')]
            ])

            # –ñ–∞—É–∞–ø—Ç—ã –∂—ñ–±–µ—Ä—É
            if len(answer) <= 1000:
                await update.message.reply_text(f"üìö –ñ–∞—É–∞–ø:\n{answer}", reply_markup=back_button)
            else:
                await update.message.reply_text("üìö –ñ–∞—É–∞–ø —Ç”©–º–µ–Ω–¥–µ –±–µ—Ä—ñ–ª–≥–µ–Ω üëá", reply_markup=back_button)
                await update.message.reply_text(answer, reply_markup=back_button)

        except Exception as e:
            await update.message.reply_text(f"‚ö†Ô∏è –ö–µ—à—ñ—Ä—ñ“£—ñ–∑, “õ–∞—Ç–µ –∫–µ—Ç—Ç—ñ.\n{e}")
    else:
        await update.message.reply_text("–ê–ª–¥—ã–º–µ–Ω 'üß† –°“±—Ä–∞“õ “õ–æ—é (AI)' –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—ã“£—ã–∑.")

# YouTube –≤–∏–¥–µ–æ—Å—ã–Ω –∞–ª—É
def get_youtube_video(query):
    youtube = build("youtube", "v3", developerKey=YOUTUBE_API_KEY)
    request = youtube.search().list(
        q=query,
        part="snippet",
        maxResults=1,
        type="video"
    )
    response = request.execute()
    items = response.get("items")
    if items:
        video_id = items[0]["id"]["videoId"]
        return f"https://www.youtube.com/watch?v={video_id}"
    return None

# –°—É—Ä–µ—Ç –∫–µ–ª–≥–µ–Ω–¥–µ GPT-4o –∞—Ä“õ—ã–ª—ã ”©“£–¥–µ—É
async def handle_image_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        photo = update.message.photo[-1]
        file = await photo.get_file()
        file_url = file.file_path

        response = openai_client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": "–ë“±–ª —Å—É—Ä–µ—Ç—Ç–µ –Ω–µ –±–µ–π–Ω–µ–ª–µ–Ω–≥–µ–Ω?"},
                        {"type": "image_url", "image_url": {"url": file_url}}
                    ]
                }
            ],
            max_tokens=500
        )

        answer = response.choices[0].message.content.strip()

        back_button = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ê—Ä—Ç“õ–∞", callback_data='main_menu')]
        ])

        await update.message.reply_text(f"üì∑ –°—É—Ä–µ—Ç —Å–∏–ø–∞—Ç—Ç–∞–º–∞—Å—ã:\n{answer}", reply_markup=back_button)

    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –°—É—Ä–µ—Ç ”©“£–¥–µ—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã:\n{e}")

# –ë–æ—Ç—Ç—ã —ñ—Å–∫–µ “õ–æ—Å—É
if __name__ == '__main__':
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_ai_question))
    app.add_handler(MessageHandler(filters.PHOTO, handle_image_message))

    print("‚úÖ –ë–æ—Ç —ñ—Å–∫–µ “õ–æ—Å—ã–ª–¥—ã...")
    app.run_polling()
